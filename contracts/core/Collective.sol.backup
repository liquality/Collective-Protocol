// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;


/* solhint-disable avoid-low-level-calls */
/* solhint-disable no-inline-assembly */
/* solhint-disable reason-string */

import "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/utils/introspection/IERC165.sol";

import "../extensions/AA/BaseAccount.sol";
import "../interfaces/AA/IEntryPoint.sol";
import {ICollective} from "../interfaces/ICollective.sol";
import {IPool} from "../interfaces/IPool.sol";
import {Pool} from "./Pool.sol";


/**
  * @title Collective contract
  * @author Liquality
  * @notice This contract is the main entry point for the Collective
  * @dev This contract along with the core collective functionalities, also implements a minimal AA account
         this is sample minimal account has execute, eth handling methods, and a single signer that can send 
         requests through the entryPoint.
*/
contract Collective is ICollective, BaseAccount, UUPSUpgradeable, Initializable {

    using MessageHashUtils for bytes32;
    using ECDSA for bytes32;
    


    /* ======================= STORAGE ====================== */

    /*  STORAGE: 
        CONSTANTS & IMMUTABLES  */
    IEntryPoint private immutable entrypoint;
    /*  STORAGE: 
        VARIABLES - PRIVATE & INTERNAL  */
    struct PoolData {
        address id;
        address honeyPot;
    }
    address private currentSigner;
    mapping(address => bool) public members; 
    mapping(address => PoolData) public pools; // Mapping of token contract addresses to pool
    mapping(address => bool) public whitelistedTargets;
    address public initiator;
    address public operator;



    /* ======================= METHODS ====================== */
    // Implement all methods from ICollective interface && BaseAccount (AA Account)

    
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor(IEntryPoint anEntryPoint) {
        entrypoint = anEntryPoint;
        _disableInitializers();
    }

    /**
     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,
     * a new implementation of Collective contract must be deployed with the new EntryPoint address, then upgrading
      * the implementation by calling `upgradeTo()`
     */
    function initialize(address theInitiator, address theOperator) public virtual initializer {
        _initialize(theInitiator, theOperator);
    }

    function _initialize(address theInitiator, address theOperator) internal virtual {
        operator = theOperator;
        initiator = theInitiator;
        members[theInitiator] = true;
        emit NewMember(theInitiator);
        emit CollectiveInitialized(theInitiator, theOperator);
    }


    /* --------------------------- WRITE METHODS ------------------------------- */

    /* ---- WRITE METHODS
            AA METHODS     ---- */
    

    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {
        return
            interfaceId == type(ICollective).interfaceId ||
            interfaceId == type(IERC165).interfaceId;
    }

    /**
     * execute a transaction (called directly from owner, or by entryPoint)
     */
    function execute(address dest, uint256 value, bytes calldata func) external {
        _requireFromEntrypoint();
        _requireToWhitelisted(dest);
        _call(dest, value, func);
        currentSigner = address(0);
    }

    /**
     * execute a sequence of transactions
     * @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value
     */
    function executeBatch(address[] calldata dest, uint256[] calldata value, bytes[] calldata func) external {
        _requireFromEntrypoint();
        require(dest.length == func.length && (value.length == 0 || value.length == func.length), "wrong array lengths");
        if (value.length == 0) {
            for (uint256 i = 0; i < dest.length; i++) {
                _requireToWhitelisted(dest[i]);
                _call(dest[i], 0, func[i]);
            }
        } else {
            for (uint256 i = 0; i < dest.length; i++) {
                _requireToWhitelisted(dest[i]);
                _call(dest[i], value[i], func[i]);
            }
        }
        currentSigner = address(0);
    }

    function _call(address target, uint256 value, bytes memory data) internal {
        (bool success, bytes memory result) = target.call{value : value}(data);
        if (!success) {
            assembly {
                revert(add(result, 32), mload(result))
            }
        }
    }

    /**
     * deposit more funds for this account in the entryPoint
     */
    function addDeposit() public payable {
        entryPoint().depositTo{value : msg.value}(address(this));
    }

    /**
     * withdraw value from the account's deposit
     * @param withdrawAddress target to send to
     * @param amount to withdraw
     */
    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public {
        _requireFromAuthorizedOperator();
        entryPoint().withdrawTo(withdrawAddress, amount);
    }

    function _authorizeUpgrade(address newImplementation) internal view override {
        (newImplementation);
        _requireFromAuthorizedOperator();
    }

    /// implement template method of BaseAccount
    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)
    internal override virtual returns (uint256 validationData) {
        bytes32 hash = userOpHash.toEthSignedMessageHash();
        address signer = hash.recover(userOp.signature);
        if (!members[signer]) {
            return SIG_VALIDATION_FAILED;
        }
        currentSigner = signer;
        emit NewSigner(signer);
        return 0;
    }

    /* ---- WRITE METHODS
            CORE METHODS     ---- */

    // solhint-disable-next-line no-empty-blocks
    receive() external payable {}

    function joinCollective(address _member) external {
        _requireFromMembersOrSelf();
        members[_member] = true;
        emit NewMember(_member);
    }

    function removeMember(address _member) external {
        _requireFromInitiator();
        members[_member] = false;
        emit MemberRemoved(_member);
    }

    function createPool(address _tokenContract, address _honeyPot) external {
        _requireFromMembersOrSelf();
        address poolAddress = address(new Pool(_tokenContract));
        pools[_tokenContract] = PoolData({
            id: poolAddress,
            honeyPot: _honeyPot
        });
        whitelistedTargets[poolAddress] = true;
        whitelistedTargets[_tokenContract] = true;
        emit PoolAdded(poolAddress, _tokenContract, _honeyPot);
    }

    function addPool(address _poolAddress, address _tokenContract, address _honeyPot) external {
        _requireFromMembersOrSelf();
        // ensure pool has not already been added
        if (pools[_tokenContract].id != address(0)) {
            revert Collective__PoolAlreadyAdded(pools[_tokenContract].id);
        }
        pools[_tokenContract] = PoolData({
            id: _poolAddress,
            honeyPot: _honeyPot
        });
        whitelistedTargets[_poolAddress] = true;
        whitelistedTargets[_tokenContract] = true;
        emit PoolAdded(_poolAddress, _tokenContract, _honeyPot);
    }

    function receivePoolReward(address _tokenContract) external payable {
        require(pools[_tokenContract].id != address(0), "Collective__PoolNotAdded");
        address payable poolAddress = payable(pools[_tokenContract].id); 
        (bool success, ) = poolAddress.call{value: msg.value}("");
        if (!success) {
            revert Collective__PoolRewardNotSent(poolAddress, _tokenContract, msg.value);
        }
        Pool(poolAddress).pause();
        emit RewardForwarded(pools[_tokenContract].id, _tokenContract, msg.value, pools[_tokenContract].honeyPot);
    }

    function renounceOperator() external {
        _requireFromAuthorizedOperator();
        delete operator;
        emit OperatorRenounced(msg.sender);
    }

    /* ------------------------------ READ METHODS ---------------------------- */


    /* ---- READ METHODS
            AA METHODS     ---- */

    /// @inheritdoc BaseAccount
    function entryPoint() public view virtual override returns (IEntryPoint) {
        return entrypoint;
    }

    /**
     * check current account deposit in the entryPoint
     */
    function getDeposit() public view returns (uint256) {
        return entryPoint().balanceOf(address(this));
    }


    /* ---- READ METHODS
            CORE METHODS     ---- */

    function _requireFromEntrypoint() internal view {
        if (msg.sender != address(entrypoint)) {
            revert Collective__OnlyEntrypoint(msg.sender);
        }
    }
    function _requireFromMembersOrSelf() internal view {
        if (!members[currentSigner] && !members[msg.sender] && msg.sender != address(this)) {
            revert Collective__OnlyMemberOrSelf(msg.sender);
        }
    }
    function _requireFromInitiator() internal view {
        if (currentSigner != initiator && msg.sender != initiator) {
            revert Collective__OnlyInitiator(msg.sender);
        }
    }
    function _requireFromAuthorizedOperator() internal view  {
        if (operator != msg.sender) {
            revert Collective__OnlyOperator(msg.sender);
        }
    }
    function _requireToWhitelisted(address dest) internal view  {
        if (!whitelistedTargets[dest] && dest != address(this)) {
            revert Collective__OnlyWhitelistedTargets(dest);
        }
    }

}